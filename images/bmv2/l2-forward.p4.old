#include <core.p4>
#include <v1model.p4>


const bit<9> PORT0 = 0;
const bit<9> PORT1 = 1;


header ethernet_t {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}


struct headers {
    ethernet_t ethernet;
}

struct metadata {
    // User-defined metadata
}

parser MyParser(packet_in packet, out headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
    state start {
        transition parse_ethernet;
    }

    state parse_ethernet {
        packet.extract(hdr.ethernet);
        transition accept;
    }
}

control MyIngress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
    apply {
  	// Allow all frames from 0 to 1
	    if (standard_metadata.ingress_port == PORT0) {
	        standard_metadata.egress_spec = PORT1;
        } 
	  // Allow only ARP frames on any other port
	  else if (standard_metadata.ingress_port == PORT1) {	
	        standard_metadata.egress_spec = PORT0;
        } 
    }  
}

control MyEgress(inout headers hdr, inout metadata meta, inout standard_metadata_t standard_metadata) {
    apply {
    }
}

control MyVerifyChecksum(inout headers hdr, inout metadata meta) {
    apply {
    }
}

control MyComputeChecksum(inout headers hdr, inout metadata meta) {
    apply {
    }
}

control MyDeparser(packet_out packet, in headers hdr) {
    apply {
        packet.emit(hdr.ethernet);
    }
}

V1Switch(
    MyParser(),
    MyVerifyChecksum(),
    MyIngress(),
    MyEgress(),
    MyComputeChecksum(),
    MyDeparser()
) main;
